/**
 * @file rw_loop.h
 * @brief Объявления функций и констант для работы с циклом чтения/записи через UNIX-сокеты.
 *
 * Этот заголовочный файл определяет базовые константы, необходимые системные включения,
 * а также объявляет функцию read_loop(), которая реализует логику разделения работы
 * между процессами чтения и записи через сокет.
 *
 * @author Ракитин Илья Алексеевич
 */

#pragma once

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/wait.h>

/**
 * @def SOCKET_PATH
 * @brief Путь к файлу UNIX-сокета.
 *
 * Используется сервером для привязки сокета и клиентом для подключения.
 */
#define SOCKET_PATH "/tmp/task2_socket"

/**
 * @def MAX_MESSAGE_LEN
 * @brief Максимальная длина сообщения, передаваемого через сокет.
 *
 * Определяет размер буфера для приема и отправки данных.
 */
#define MAX_MESSAGE_LEN 1024

/**
 * @brief Разделяет чтение и запись в сокет на два отдельных процесса.
 *
 * Создаёт дочерний процесс: родительский процесс ожидает входящие данные из сокета,
 * дочерний — считывает ввод с терминала и отправляет его через сокет.
 * Работает до закрытия соединения одной из сторон.
 *
 * @param sockfd Дескриптор сокета, через который осуществляется обмен данными.
 * @param connect_name Имя соединения (например, "client" или "server") для логирования.
 * @return Возвращает 0 при успешном завершении, -1 в случае ошибки.
 */
int read_loop(int sockfd, char* connect_name);
