/**
 * @file variable.h
 * @brief Заголовочный файл для работы с введенными переменными
 *
 * Содержит объявления функций:
 *   - инициализации массива переменных
 *   - освобождения памяти
 *   - получения значения переменных из пользовательского ввода
 *   - поиска переменных среди уже сохраненных
 *
 * @author Ракитин Илья Алексеевич
 */

#pragma once

#include <stdio.h>
#include <stdlib.h>
#include "token.h"

/**
 * @struct s_variable
 * @brief Содержит информацию о переменной
 */
typedef struct
{
    char* name;
    int value;
} s_variable;

/**
 * @brief Динамически инициализирует массив переменных
 *
 * @param size Максимальное кол-во элементов
 * @return указатель на массив или NULL в случае ошибки
 */
s_variable* init_vars_arr(int size);

/**
 * @brief Освобождает выделенный массив переменных
 *
 * @param vars Указатель на массив, который нужно освободить
 * @param size Максимальное кол-во элементов
 */
void free_vars_arr(s_variable* vars, int size);


/**
 * @brief Получает числовое значение для переменной.
 *
 * Если переменная неизвестна, запрашивает у пользователя.
 *
 * @param token Токен (имя переменной или число).
 * @return Возвращает целочисленное значение для токена.
 */
int get_value(char* token);

/**
 * @brief Пытается найти токен среди имен уже известных переменных
 *
 * Проходится по массиву vars до vars[n_vars] и сравнивает token
 * с vars[i].name. Если находит совпадение, возвращает индекс
 *
 * @param vars Массив переменных, в которм нужно искать
 * @param n_vars Текущий размер этого массива
 * @param token Токен, которому нужно найти соответствие
 * @return Возвращает индекс переменной или -1, если она не найдена
 */
int find_var(s_variable* vars, int n_vars, char* token);
