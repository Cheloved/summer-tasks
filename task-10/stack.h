/**
 * @file stack.h
 * @brief Заголовочный файл, реализующий стек строк.
 *
 * Содержит объявление структуры `s_stack` и функций для работы со стеком:
 * - проверка на пустоту/переполнение,
 * - добавление элемента (push),
 * - извлечение элемента (pop),
 * - просмотр верхнего элемента (peek).
 *
 * @author Ракитин Илья Алексеевич
 */

#pragma once

#include <stdio.h>
#include <string.h>

/**
 * @struct s_stack
 * @brief Структура, представляющая стек строк.
 *
 * Хранит массив строк, текущую позицию вершины стека и максимальное количество элементов.
 */
typedef struct
{
    char** elems;
    int top;
    int max_num;
} s_stack;

/**
 * @brief Проверяет, является ли стек пустым.
 *
 * @param stack Стек для проверки.
 * @return Возвращает 1, если стек пустой, иначе — 0.
 */
int is_empty(s_stack stack);

/**
 * @brief Проверяет, является ли стек полным.
 *
 * @param stack Стек для проверки.
 * @return Возвращает 1, если стек заполнен, иначе — 0.
 */
int is_full(s_stack stack);

/**
 * @brief Добавляет строку в стек.
 *
 * @param stack Указатель на стек.
 * @param value Строка, которую нужно добавить.
 * @return Возвращает 0 при успешном выполнении, -1 при переполнении стека.
 */
int push(s_stack* stack, char* value);

/**
 * @brief Извлекает верхний элемент из стека.
 *
 * @param stack Указатель на стек.
 * @param result Буфер, куда будет записано значение.
 * @return Возвращает 0 при успешном выполнении, -1, если стек пустой.
 */
int pop(s_stack* stack, char* result);

/**
 * @brief Получает верхний элемент стека без его удаления.
 *
 * @param stack Стек.
 * @param result Буфер, куда будет записано значение.
 * @return Возвращает 0 при успешном выполнении, -1, если стек пустой.
 */
int peek(s_stack stack, char* result);
